generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_POOLED")
  directUrl = env("DATABASE_URL_DIRECT")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserProfile {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username    String   @unique
  bio         String?
  userId      String   @unique @map("user_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  avatarUrl   String?  @map("avatar_url")
  displayName String?  @map("display_name")
  location    String?
  website     String?
  lists       List[]
  pins        Pin[]
  user        User     @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model User {
  id        String       @id @db.Uuid
  email     String       @unique
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  profile   UserProfile?

  @@map("users")
}

model Book {
  id                 String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug               String                   @unique
  title              String
  authorName         String?                  @map("author_name")
  openLibraryWorkId  String?                  @unique @map("open_library_work_id")
  coverImageUrl      String?                  @map("cover_image_url")
  createdAt          DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  editionsCount      Int?                     @map("editions_count")
  firstPublishedYear Int?                     @map("first_published_year")
  description        String?
  isTranslated       Boolean                  @default(false) @map("is_translated")
  originalTitle      String?                  @map("original_title")
  subtitle           String?
  titleAuthorSearch  Unsupported("tsvector")? @default(dbgenerated("to_tsvector('english'::regconfig, ((((COALESCE(title, ''::text) || ' '::text) || COALESCE(original_title, ''::text)) || ' '::text) || COALESCE(author_name, ''::text)))")) @map("title_author_search")

  @@index([openLibraryWorkId])
  @@index([titleAuthorSearch], type: Gin)
  @@map("books")
}

model List {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                String
  title               String
  description         String?
  creatorId           String               @map("creator_id") @db.Uuid
  ownerId             String               @map("owner_id") @db.Uuid
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  designation         String?
  updatedAt           DateTime?            @map("updated_at") @db.Timestamptz(6)
  listItemAssignments ListItemAssignment[]
  creator             UserProfile          @relation(fields: [creatorId], references: [id])

  @@unique([slug, ownerId])
  @@index([creatorId])
  @@index([ownerId])
  @@map("lists")
}

model ListItemAssignment {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listId           String   @map("list_id") @db.Uuid
  listedObjectType String   @map("listed_object_type")
  listedObjectId   String   @map("listed_object_id") @db.Uuid
  sortOrder        Int      @map("sort_order")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  list             List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([listId, listedObjectId, listedObjectType])
  @@unique([listId, sortOrder])
  @@index([listId])
  @@index([listedObjectId])
  @@map("list_item_assignments")
}

model Pin {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pinnerId         String      @map("pinner_id") @db.Uuid
  pinnedObjectType String      @map("pinned_object_type")
  pinnedObjectId   String      @map("pinned_object_id") @db.Uuid
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  sortOrder        Int         @map("sort_order")
  pinner           UserProfile @relation(fields: [pinnerId], references: [id])

  @@unique([pinnerId, pinnedObjectId, pinnedObjectType])
  @@unique([pinnerId, sortOrder])
  @@index([pinnerId])
  @@index([pinnedObjectId])
  @@map("pins")
}
