generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_POOLED")
  directUrl = env("DATABASE_URL_DIRECT")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserProfile {
  id                   String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username             String                    @unique
  bio                  String?
  userId               String                    @unique @map("user_id") @db.Uuid
  avatarUrl            String?                   @map("avatar_url")
  displayName          String?                   @map("display_name")
  location             String?
  website              String?
  createdAt            DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime?                 @updatedAt @map("updated_at") @db.Timestamptz(6)
  user                 User                      @relation(fields: [userId], references: [id], onDelete: Restrict)
  lists                List[]
  pins                 Pin[]
  bookNotes            BookNote[]
  bookReads            BookRead[]
  currentStatuses      UserCurrentStatus[]
  bookShelfAssignments UserBookShelfAssignment[]
  roleAssignments      UserRole[]
  invitesCreated       UserInvite[]

  @@map("user_profiles")
}

model User {
  id            String           @id @db.Uuid
  email         String           @unique
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?        @updatedAt @map("updated_at") @db.Timestamptz(6)
  profile       UserProfile?
  inviteClaimed UserInvite?
  inviteClaim   UserInviteClaim?

  @@map("users")
}

model Book {
  id                       String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                     String                    @unique
  title                    String
  authorName               String?                   @map("author_name")
  openLibraryWorkId        String?                   @unique @map("open_library_work_id")
  coverImageUrl            String?                   @map("cover_image_url")
  coverImageThumbnailUrl   String?                   @map("cover_image_thumbnail_url")
  openLibraryCoverImageUrl String?                   @map("open_library_cover_image_url")
  editionsCount            Int?                      @map("editions_count")
  firstPublishedYear       Int?                      @map("first_published_year")
  description              String?
  isTranslated             Boolean                   @default(false) @map("is_translated")
  originalTitle            String?                   @map("original_title")
  subtitle                 String?
  titleAuthorSearch        Unsupported("tsvector")?  @default(dbgenerated("to_tsvector('english'::regconfig, ((((COALESCE(title, ''::text) || ' '::text) || COALESCE(original_title, ''::text)) || ' '::text) || COALESCE(author_name, ''::text)))")) @map("title_author_search")
  createdAt                DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime?                 @updatedAt @map("updated_at") @db.Timestamptz(6)
  bookNotes                BookNote[]
  bookReads                BookRead[]
  userCurrentStatuses      UserCurrentStatus[]
  userShelfAssignments     UserBookShelfAssignment[]

  @@index([openLibraryWorkId])
  @@index([titleAuthorSearch], type: Gin)
  @@map("books")
}

model List {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                String
  title               String
  description         String?
  creatorId           String               @map("creator_id") @db.Uuid
  ownerId             String               @map("owner_id") @db.Uuid
  designation         String?
  ranked              Boolean              @default(false)
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?            @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator             UserProfile          @relation(fields: [creatorId], references: [id])
  listItemAssignments ListItemAssignment[]

  @@unique([slug, ownerId])
  @@index([creatorId])
  @@index([ownerId])
  @@map("lists")
}

model ListItemAssignment {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listId           String    @map("list_id") @db.Uuid
  listedObjectType String    @map("listed_object_type")
  listedObjectId   String    @map("listed_object_id") @db.Uuid
  sortOrder        Int       @map("sort_order")
  note             String?
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  list             List      @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([listId, listedObjectId, listedObjectType])
  @@unique([listId, sortOrder])
  @@index([listId])
  @@index([listedObjectId])
  @@map("list_item_assignments")
}

model Pin {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pinnerId         String      @map("pinner_id") @db.Uuid
  pinnedObjectType String      @map("pinned_object_type")
  pinnedObjectId   String      @map("pinned_object_id") @db.Uuid
  sortOrder        Int         @map("sort_order")
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?   @updatedAt @map("updated_at") @db.Timestamptz(6)
  pinner           UserProfile @relation(fields: [pinnerId], references: [id], onDelete: Cascade)

  @@unique([pinnerId, pinnedObjectId, pinnedObjectType])
  @@unique([pinnerId, sortOrder])
  @@index([pinnerId])
  @@index([pinnedObjectId])
  @@map("pins")
}

model BookNote {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  creatorId     String      @map("creator_id") @db.Uuid
  bookId        String      @map("book_id") @db.Uuid
  bookReadId    String?     @map("book_read_id") @db.Uuid
  noteType      String      @map("note_type")
  text          String?
  title         String?
  linkUrl       String?     @map("link_url")
  readingStatus String?     @map("reading_status")
  likeCount     Int         @default(0) @map("like_count")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?   @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator       UserProfile @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  book          Book        @relation(fields: [bookId], references: [id])
  bookRead      BookRead?   @relation(fields: [bookReadId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([bookId])
  @@index([bookReadId])
  @@map("book_notes")
}

model BookRead {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  readerId  String      @map("reader_id") @db.Uuid
  bookId    String      @map("book_id") @db.Uuid
  status    String
  startDate DateTime?   @map("start_date") @db.Timestamptz(6)
  endDate   DateTime?   @map("end_date") @db.Timestamptz(6)
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime?   @updatedAt @map("updated_at") @db.Timestamptz(6)
  reader    UserProfile @relation(fields: [readerId], references: [id], onDelete: Cascade)
  book      Book        @relation(fields: [bookId], references: [id])
  bookNotes BookNote[]

  @@index([readerId])
  @@index([bookId])
  @@map("book_reads")
}

model Interaction {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agentType       String    @map("agent_type")
  agentId         String    @map("agent_id") @db.Uuid
  interactionType String    @map("interaction_type")
  objectType      String    @map("object_type")
  objectId        String    @map("object_id") @db.Uuid
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([agentId, agentType, interactionType, objectId, objectType])
  @@index([agentId, agentType])
  @@index([objectId, objectType])
  @@map("interactions")
}

model UserCurrentStatus {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userProfileId String      @map("user_profile_id") @db.Uuid
  bookId        String?     @map("book_id") @db.Uuid
  text          String?
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  book          Book?       @relation(fields: [bookId], references: [id])

  @@index([userProfileId])
  @@index([bookId])
  @@map("user_current_statuses")
}

model UserBookShelfAssignment {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userProfileId String      @map("user_profile_id") @db.Uuid
  bookId        String      @map("book_id") @db.Uuid
  shelf         String
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  book          Book        @relation(fields: [bookId], references: [id])

  @@unique([userProfileId, bookId])
  @@index([userProfileId])
  @@index([bookId])
  @@map("user_book_shelf_assignments")
}

model UserRole {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userProfileId String      @map("user_profile_id") @db.Uuid
  role          String      @map("role")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?   @updatedAt @map("updated_at") @db.Timestamptz(6)
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, role])
  @@index([userProfileId])
  @@map("user_roles")
}

model UserInvite {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inviterId       String            @map("inviter_id") @db.Uuid
  code            String            @map("code")
  expiresAt       DateTime?         @map("expires_at") @db.Timestamptz(6)
  claimedByUserId String?           @map("claimed_by_user_id") @db.Uuid
  claimedAt       DateTime?         @map("claimed_at") @db.Timestamptz(6)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?         @updatedAt @map("updated_at") @db.Timestamptz(6)
  inviter         UserProfile       @relation(fields: [inviterId], references: [id])
  claimedByUser   User?             @relation(fields: [claimedByUserId], references: [id])
  claims          UserInviteClaim[]

  @@unique([code])
  @@unique([claimedByUserId])
  @@index([inviterId])
  @@map("user_invites")
}

model UserInviteClaim {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inviteId        String     @map("invite_id") @db.Uuid
  claimedByUserId String     @map("claimed_by_user_id") @db.Uuid
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?  @updatedAt @map("updated_at") @db.Timestamptz(6)
  invite          UserInvite @relation(fields: [inviteId], references: [id])
  claimedByUser   User       @relation(fields: [claimedByUserId], references: [id])

  @@unique([claimedByUserId])
  @@index([inviteId])
  @@map("user_invite_claims")
}

model FeatureFlag {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @map("name")
  enabled   Boolean   @default(false) @map("enabled")
  scope     String?   @map("scope")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([name, scope])
  @@map("feature_flags")
}

model TagAssignment {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tag              String
  taggedObjectType String    @map("tagged_object_type")
  taggedObjectId   String    @map("tagged_object_id") @db.Uuid
  scopeType        String?   @map("scope_type")
  scopeId          String?   @map("scope_id") @db.Uuid
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([taggedObjectId, taggedObjectType, tag, scopeType, scopeId])
  @@index([taggedObjectId, scopeId])
  @@index([scopeId, tag])
  @@map("tag_assignments")
}

model Waitlister {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  email      String
  data       Json
  subscribed Boolean   @default(false)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([email])
  @@map("waitlisters")
}
